---
x-nautobot-build: &nautobot-build
  build:
    args:
      NAUTOBOT_VER: "${NAUTOBOT_VER}"
      PYTHON_VER: "${PYTHON_VER}"
    context: "../"
    dockerfile: "development/Dockerfile"
x-nautobot-base: &nautobot-base
  image: "nautobot-capacity-metrics/nautobot:${NAUTOBOT_VER}-py${PYTHON_VER}"
  env_file:
    - "dev.env"
    - "creds.env"
  tty: true

version: "3.4"
services:
  nautobot:
    ports:
      - "8080:8080"
    depends_on:
      - "postgres"
      - "redis"
    <<: *nautobot-build
    <<: *nautobot-base

  worker:
    entrypoint: "nautobot-server rqworker_metrics"
    depends_on:
      - "nautobot"
    healthcheck:
      disable: true
    <<: *nautobot-base

  celery:
    entrypoint: "nautobot-server celery worker -l INFO"
    depends_on:
      - "nautobot"
    healthcheck:
      disable: true
    <<: *nautobot-base

  prometheus:
    image: "prom/prometheus:v2.28.1"
    command: "--storage.tsdb.retention.time=1d --config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus_data:/prometheus"
    tty: true
  grafana:
    image: "grafana/grafana:8.0.5"
    volumes:
      - "./grafana/provisioning:/etc/grafana/provisioning"
      - "grafana_data:/var/lib/grafana"
      - "./grafana/dashboards:/var/lib/grafana/dashboards"
    ports:
      - "3000:3000"
    environment:
      GF_SERVER_ENABLE_GZIP: "true"
      GF_LOG_FILTERS: "rendering:debug"
volumes:
  postgres_data: {}  # Nuatobot Postgres
  grafana_data: {}
  prometheus_data: {}
